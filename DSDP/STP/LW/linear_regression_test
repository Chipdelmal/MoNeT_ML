#%%
from os import path
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.interpolate import griddata
import math
from datascience import *

GDRIVE = 'LDR'
FILE_NAME = 'SCA_HLT_50Q_10T.csv'
BASE_PATH = '/Users/lillianweng/Desktop/DSDP/mosquito_raw_data/'
###############################################################################
# Load dataset
###############################################################################
expPath = path.join(BASE_PATH, GDRIVE, FILE_NAME)
DATA = pd.read_csv(expPath)
print('* Dataset Path: {}'.format(expPath))
print('* Dataset Dimensions: {}'.format(DATA.shape))
DATA.head()
###############################################################################
# Filter to "center" parameters
###############################################################################
fltr = (
    (DATA['i_grp'] == 0)    &
    (DATA['i_sex'] == 1)    &
    np.isclose(DATA['i_fch'], 0.175)    &
    np.isclose(DATA['i_fcb'], 0.117)    &
    np.isclose(DATA['i_fcr'], 0)        &
    np.isclose(DATA['i_hrm'], 1.0)      &
    np.isclose(DATA['i_hrf'], 0.956)    &
    np.isclose(DATA['i_rsg'], 0.079)    &
    np.isclose(DATA['i_gsv'], 1.e-02) 
)
df = DATA[fltr]
df.head()
# %%
## load under numpy
DF = Table().read_table(expPath)
DF.show(10)
# %%
## calculate R values for each variable in relation to WOP and CPT
def standard_units(arr):
    return (arr - np.mean(arr)) / np.std(arr)
def r_value(x, y):
    return np.mean(standard_units(DF.column(x)) * standard_units(DF.column(y)))

independent_vars = ['i_sex', 'i_ren', 'i_res', 'i_gsv', "i_fch", 'i_fcb', 'i_fcr' ,'i_hrf', 'i_grp', 'i_mig']
WOP_r = []
CPT_r = []
for var in independent_vars:
    CPT_r.append(r_value(var, "CPT"))
    WOP_r.append(r_value(var, "WOP"))

r_value_table = Table().with_columns("independent var", independent_vars,'WOP r', WOP_r, 'CPT r', CPT_r)
r_value_table

# %%
## scatter plot
import matplotlib.pyplot as plt
def bootleg_scatter(x, y):
    plt.scatter(DF.column(x), DF.column(y))
bootleg_scatter('i_sex', 'WOP')
# %%
(fig, ax) = plt.subplots(figsize=(10, 8))
sns.scatterplot(data=df, x='i_ren', y='WOP', hue='i_res')
fig.show()

# %%
##grp and mig is always 0 so can get rid of them
## also sex is a categorical variable not numerical so do the 3 column t/f thing