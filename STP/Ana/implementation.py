# -*- coding: utf-8 -*-
"""toUpload.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pzi1GSLSl6y5lZTRn7-UzvGHT94SF-gX
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import os.path as path
import matplotlib.pyplot as plt
from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import linear_model
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.tree import DecisionTreeRegressor
from sklearn import tree
from sklearn.multioutput import MultiOutputRegressor
from sklearn import preprocessing
import pickle
# %matplotlib inline

# Paths
BASE_DIR = '/content/drive/MyDrive/TESINA/Dataset'
FILE_NAME = 'SCA_HLT_50Q_10T.csv'
GRAPHS_DIR = '/content/drive/MyDrive/TESINA/Graficos'

def data_preprocessing(df):
  # Deleting y's with no uses in this project TTO, POE, POF, CPT and MNF
  df.drop(['TTO', 'POE', 'POF', 'MNF'], axis=1, inplace=True)

  #Deleting x's that are just 0 such as i_grp and i_mig
  df.drop(['i_grp', 'i_mig'], axis=1, inplace=True)

  # Replacing the unique catecorical variable into a numerical one
  df_mosquitoGender = pd.get_dummies(df['i_sex'])

  # Replacing the colum names of 1, 2, 3 for i_m, i_mwpf and i_mwf  for males, males with pregnant females and males with females
  df_mosquitoGender.set_axis(['i_m', 'i_mwpf', 'i_mwf'], axis=1, inplace=True)

  # adding the numerical frame to the dataset
  df = pd.concat([df, df_mosquitoGender], axis=1)

  # Delete categorical i_sex
  df.drop(['i_sex'], axis=1, inplace=True)

  # Reordering columns
  df = df[['i_m', 'i_mwpf', 'i_mwf', 'i_ren','i_res' ,'i_rsg' ,'i_gsv',	'i_fch',	'i_fcb',	'i_fcr',	'i_hrm',	'i_hrf',	'TTI',	'WOP', 'CPT']]

  # Separating x's and y's
  x = df.iloc[:, 0:12]
  y = df.iloc[:, 12:15]

  #Min Max Scaling: To scale the range set at 0 to 1)
  x.iloc[:,:] = MinMaxScaler().fit_transform(x)

  # Puting together all data after normalization
  new_df = pd.concat([x, y], axis=1)

  return new_df, x, y

def linearReg(x, y):
  # Spliting data into test and train
  X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33)
  #Linear Regression

  # Base Linear Regresion
  regr = linear_model.LinearRegression()
  #train model
  regr.fit(X_train,y_train)
  #predict with test 
  y_=regr.predict(X_test)
  #get the cross validation score 
  acc = cross_val_score(regr, x, y)

  print('Coefficients:', regr.coef_)
  # Error that occurs due to a model's sensitivity to small fluctuations in the training set.
  print('R^2 score %.2f' % regr.score(X_train,y_train)) 
  print('Mean Cross Validation Score: %.2f' % np.mean(acc))
  print('Mean Squared Error: %.2f \n' % np.sqrt(metrics.mean_squared_error(y_test,y_)))

  return(regr)

def RegTree(X, y, depth):
  # Spliting data into test and train
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)
  # Decision Tree Regressor
  dtr = tree.DecisionTreeRegressor(max_depth=depth, random_state=0)
  # Training tree
  dtr.fit(X_train,y_train)
  print('R^2 train: ', dtr.score(X_train, y_train))
  print('R^2 test: %.2f \n'% dtr.score(X_train, y_train))
  plt.figure(figsize=(200,100))
  tree.plot_tree(dtr, feature_names=X_train.columns, filled=True)

def serializeModel(model, filename):
  return pickle.dump(model, open(filename, 'wb'))

def loadModel(filename):
  loaded_model = pickle.load(open(filename, 'rb'))
  result = loaded_model.score(X_test, Y_test)
  print("Result: \n", result)

df = pd.read_csv(path.join(BASE_DIR, FILE_NAME))
df, x, y = data_preprocessing(df)

WOPx = x[['i_fch','i_fcb', 'i_fcr', 'i_ren', 'i_res']]
CPTx = x[['i_fch','i_fcb', 'i_fcr', 'i_ren', 'i_res']]
TTIx = x[['i_res', 'i_ren']]

print("Linear Regression WOP\n")
linearReg(WOPx, y['WOP'])
print("Linear Regression TTI\n")
linearReg(TTIx, y['TTI'])
print("Linear Regression CDT\n")
linearReg(CPTx, y['CPT'])

print("Regressor Tree TTI\n")
RegTree(TTIx, y['TTI'], 7)
print("Regressor Tree WOP\n")
RegTree(WOPx, y['WOP'], 3)
print("Regressor Tree CPT\n")
RegTree(CPTx, y['CPT'], 5)